setwd("C:/Users/kspin/Documents/R Outputs/Projects/SDS_6/DaviesHarte-master")
require("pacman")
p_load("boot","stat","ggplot")
search()
p_load(boot,stat,ggplot)
setwd("C:/Users/kspin/Documents/R Outputs/Projects/SDS_6")
setwd("C:/Users/kspin/Documents/R Outputs/Projects/SDS_6/DaviesHarte-master")
pacman::p_load(ggplot,boot,stat)
pacman::p_load(ggplot,boot)
setwd("C:/Users/kspin/Documents/R Outputs/Projects/SDS_6")
pacman::p_load(ggplot,boot)
setwd("C:/Users/kspin/Documents/R Outputs")
pacman::p_load(ggplot,boot)
search()
require(boot)
require("boot")
setwd("C:\Users\kspin\Documents\R Outputs\Projects\SDS_6\AR1_Estimation")
require("pacman")
pacman::p_load(boot,latex2exp,tseries,ggplot2)
setwd(C:\Users\kspin\Documents\R Outputs\Projects\SDS_6\AR1_Estimation)
require("pacman")
pacman::p_load(boot,latex2exp,tseries,ggplot2)
setwd('C:\Users\kspin\Documents\R Outputs\Projects\SDS_6\AR1_Estimation')
setwd("C:/Users/kspin/Documents/R Outputs/Projects/SDS_6/AR1_Estimation")
R_Setup.R
setwd("C:/Users/kspin/Documents/R Outputs/Projects/SDS_6")
R_setup.R
########## R SETUP ###########
setwd("C:/Users/kspin/Documents/R Outputs/Projects/SDS_6/AR1_Estimation")
require("pacman")
pacman::p_load(boot,latex2exp,tseries,ggplot2)
#automatic install of packages if they are not installed already
list.of.packages <- c(
"foreach",
"doParallel",
"ranger",
"palmerpenguins",
"tidyverse",
"kableExtra"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages) > 0){
install.packages(new.packages, dep=TRUE)
}
#loading packages
for(package.i in list.of.packages){
suppressPackageStartupMessages(
library(
package.i,
character.only = TRUE
)
)
}
parallel::detectCores()
n.cores <- parallel::detectCores() - 1
#create the cluster
my.cluster <- parallel::makeCluster(
n.cores,
type = "PSOCK"
)
#check cluster definition (optional)
print(my.cluster)
#register it to be used by %dopar%
doParallel::registerDoParallel(cl = my.cluster)
#check if it is registered (optional)
foreach::getDoParRegistered()
foreach::getDoParWorkers()
#TO CLOSE CLUSTER, parallel::stopCluster(cl = my.cluster)
source("ar_acvs.R")
source("DaviesHarte.R")
source("AR1_estimation_fct.R")
source("MODIFIED_AR1_estimation_fct.R")
#here we'll plot phi against phi_hat
ITERS <- 10
temp <- AR1_estimation_fct(200, -0.90, 1000, 0.025, 0.975, 20)
for (j in 1:(ITERS-1))
{
temp <- temp + AR1_estimation_fct(200, -0.90, 1000, 0.025, 0.975, 20)
print(paste0("j loop iteration: ",j))
}
temp <- temp / ITERS
Result <-temp
for (k in seq(-0.89,0.90,0.01))
{
temp <- 0
temp <- AR1_estimation_fct(200, k, 1000, 0.025, 0.975, 20)
for (j in 1:(ITERS-1))
{
temp <- temp + AR1_estimation_fct(200, k, 1000, 0.025, 0.975, 20)
print(paste0("j loop iteration: ",j))
}
temp <- temp / ITERS
Result <-rbind(Result, temp)
print(k)
}
ggplot(Result, aes(x = phi, y = phi_hat_1)) + xlab(TeX(r"($\phi$)")) + ylab(TeX(r"($\hat{\phi_1}$)")) + geom_smooth(aes(ymin = T1L,ymax = T1U), fill = "blue", colour = "blue", stat = "identity") + geom_abline(slope = 1, intercept = 0) + coord_fixed(xlim = c(-1,1),ylim = c(-1,1))
ggplot(Result, aes(x = phi, y = phi_hat_2)) + xlab(TeX(r"($\phi$)")) + ylab(TeX(r"($\hat{\phi_2}$)")) + geom_smooth(aes(ymin = T2L,ymax = T2U), fill = "red", colour = "red", stat = "identity") + geom_abline(slope = 1, intercept = 0) + coord_fixed(xlim = c(-1,1),ylim = c(-1,1))
ggplot(Result, aes(x = phi, y = phi_hat_3)) + xlab(TeX(r"($\phi$)")) + ylab(TeX(r"($\hat{\phi_3}$)")) + geom_smooth(aes(ymin = T3L,ymax = T3U), fill = "purple", colour = "purple", stat = "identity") + geom_abline(slope = 1, intercept = 0) + coord_fixed(xlim = c(-1,1),ylim = c(-1,1))
ggplot(Result, aes(x = phi, y = phi_hat_4)) + xlab(TeX(r"($\phi$)")) + ylab(TeX(r"($\hat{\phi_4}$)")) + geom_smooth(aes(ymin = T4L,ymax = T4U), fill = "black", colour = "black", stat = "identity") + geom_abline(slope = 1, intercept = 0) + coord_fixed(xlim = c(-1,1),ylim = c(-1,1))
save(Result, file = "Results.RData")
k <- foreach (j = 1:10, .combine = '+') %dopar% {j}
k
s <- 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10
s
source("ar_acvs.R")
source("DaviesHarte.R")
source("AR1_estimation_fct.R")
source("MODIFIED_AR1_estimation_fct.R")
#here we'll plot phi against phi_hat
ITERS <- 10
temp <- foreach (j = 1:ITERS, .combine = '+') %dopar%
{
AR1_estimation_fct(200, -0.90, 1000, 0.025, 0.975, 20)
}
temp <- temp / ITERS
Result <-temp
for (k in seq(-0.89,0.90,0.01))
{
temp <- foreach (j = 1:ITERS, .combine = '+') %dopar%
{
AR1_estimation_fct(200, k, 1000, 0.025, 0.975, 20)
}
temp <- temp / ITERS
Result <-rbind(Result, temp)
print(k)
}
ggplot(Result, aes(x = phi, y = phi_hat_1)) + xlab(TeX(r"($\phi$)")) + ylab(TeX(r"($\hat{\phi_1}$)")) + geom_smooth(aes(ymin = T1L,ymax = T1U), fill = "blue", colour = "blue", stat = "identity") + geom_abline(slope = 1, intercept = 0) + coord_fixed(xlim = c(-1,1),ylim = c(-1,1))
ggplot(Result, aes(x = phi, y = phi_hat_2)) + xlab(TeX(r"($\phi$)")) + ylab(TeX(r"($\hat{\phi_2}$)")) + geom_smooth(aes(ymin = T2L,ymax = T2U), fill = "red", colour = "red", stat = "identity") + geom_abline(slope = 1, intercept = 0) + coord_fixed(xlim = c(-1,1),ylim = c(-1,1))
ggplot(Result, aes(x = phi, y = phi_hat_3)) + xlab(TeX(r"($\phi$)")) + ylab(TeX(r"($\hat{\phi_3}$)")) + geom_smooth(aes(ymin = T3L,ymax = T3U), fill = "purple", colour = "purple", stat = "identity") + geom_abline(slope = 1, intercept = 0) + coord_fixed(xlim = c(-1,1),ylim = c(-1,1))
ggplot(Result, aes(x = phi, y = phi_hat_4)) + xlab(TeX(r"($\phi$)")) + ylab(TeX(r"($\hat{\phi_4}$)")) + geom_smooth(aes(ymin = T4L,ymax = T4U), fill = "black", colour = "black", stat = "identity") + geom_abline(slope = 1, intercept = 0) + coord_fixed(xlim = c(-1,1),ylim = c(-1,1))
save(Result, file = "Results.RData")
